"enable f16;

      struct Uniforms { output_size:u32, pads:array<vec4<i32>, 2>, constant_value:f16, x_shape:vec4<u32>, x_strides:vec4<u32>, output_shape:vec4<u32>, output_strides:vec4<u32> };
      @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  fn o2i_output(offset: u32) -> vec4<u32> {
    var indices: vec4<u32>;
    var current = offset;

    let dim0 = current / uniforms.output_strides[0];
    let rest0 = current % uniforms.output_strides[0];
    indices[0] = dim0;
    current = rest0;

    let dim1 = current / uniforms.output_strides[1];
    let rest1 = current % uniforms.output_strides[1];
    indices[1] = dim1;
    current = rest1;

    let dim2 = current / uniforms.output_strides[2];
    let rest2 = current % uniforms.output_strides[2];
    indices[2] = dim2;
    current = rest2;
    indices[3] = current;
    return indices;
  }

            @group(0) @binding(0) var<storage, read> x: array<f16>;
@group(0) @binding(1) var<storage, read_write> output: array<f16>;
            @compute @workgroup_size(64, 1, 1)
  fn main(@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>) {
    let global_idx = global_id.x; let local_idx = local_id.x;

            if (global_idx >= uniforms.output_size) { return; }

            let indices = o2i_output(global_idx);

            var value = f16(0);

          value = f16(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;

            k = i32(indices[3]) - uniforms.pads[0][3];
            if (k < 0) {
              break;
            }
            if (k >= i32(uniforms.x_shape[3])) {
              break;
            }
            offset += k * i32(uniforms.x_strides[3]);

            k = i32(indices[2]) - uniforms.pads[0][2];
            if (k < 0) {
              break;
            }
            if (k >= i32(uniforms.x_shape[2])) {
              break;
            }
            offset += k * i32(uniforms.x_strides[2]);

            k = i32(indices[1]) - uniforms.pads[0][1];
            if (k < 0) {
              break;
            }
            if (k >= i32(uniforms.x_shape[1])) {
              break;
            }
            offset += k * i32(uniforms.x_strides[1]);

            k = i32(indices[0]) - uniforms.pads[0][0];
            if (k < 0) {
              break;
            }
            if (k >= i32(uniforms.x_shape[0])) {
              break;
            }
            offset += k * i32(uniforms.x_strides[0]);

            value = x[offset];
          }

            output[global_idx] = value;
        }"
